"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 4.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os
import pymysql

pymysql.install_as_MySQLdb()
import environ

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


env = environ.Env()

env_path = BASE_DIR / ".env"

if env_path.exists():
    with env_path.open("rt", encoding="utf8") as f:
        env.read_env(f)


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/
SECRET_KEY = env.str(
    "SECRET_KEY",
    default="",
)

# SECURITY WARNING: keep the secret key used in production secret!

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'corsheaders',

    # myapp
    'accounts',
    'api',
    'main',

    # django-rest-auth
    'rest_framework',
    'rest_framework.authtoken',

    'rest_framework_simplejwt',
    'rest_framework_simplejwt.token_blacklist',

    'dj_rest_auth',
    'dj_rest_auth.registration',
    'knox',

    # django-allauth
    'allauth',
    'allauth.account',
    'allauth.socialaccount',

    # django-cron
    'django_crontab',


    # aws s3
    'boto3'
    ]

AUTH_USER_MODEL = 'accounts.User'



MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'allauth.account.middleware.AccountMiddleware',
    'api.middleware.AutoTokenRefreshMiddleware',  # 미들웨어 추가
    'corsheaders.middleware.CorsMiddleware',
    ]

ROOT_URLCONF = 'core.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'core.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql', # mysqlclient librarly 설치
        'NAME': 'univpark',
        'USER': 'dev',
        'PASSWORD': env.str(
        "MARIA_DB_ROOT_PASSWORD",
            default="",
            ), # mariaDB 설치 시 입력한 root 비밀번호 입력
        'HOST': 'univ-parking.xyz',
        'PORT': '3306'
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Seoul'

USE_I18N = True

USE_L10N = True

USE_TZ = False  # False 로 설정해야 DB에 변경 된 TIME_ZONE 이 반영 됨



# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

# Static files (CSS, JavaScript, Images)
# 정적 파일 URL
STATIC_URL = '/static/'

# 정적 파일 디렉토리 경로 설정
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]



AWS_ACCESS_KEY_ID = env.str(
    "AWS_ACCESS_KEY_ID",
    default="",
)
AWS_SECRET_ACCESS_KEY = env.str(
    "AWS_SECRET_ACCESS_KEY",
    default="",
)
AWS_S3_REGION_NAME = env.str(
    "AWS_S3_REGION_NAME",
    default="",
)
AWS_STORAGE_BUCKET_NAME = env.str(
    "AWS_STORAGE_BUCKET_NAME",
    default="",
)

AWS_S3_CUSTOM_DOMAIN = '%s.s3.%s.amazonaws.com' % (AWS_STORAGE_BUCKET_NAME, AWS_S3_REGION_NAME)
AWS_S3_OBJECT_PARAMETERS = {
    'CacheControl': 'max-age=86400',
}
DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# Rest Framework ENV Setting
REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': (
        # 'rest_framework.permissions.IsAuthenticated', # 인증된 사용자만 접근
        'rest_framework.permissions.AllowAny',  # 인증된 사용자만 접근
        ),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),

}

ACCOUNT_USER_MODEL_USERNAME_FIELD = None
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_EMAIL_VERIFICATION = 'none'
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
REST_USE_JWT = True

from datetime import timedelta
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=30),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': False,
    'UPDATE_LAST_LOGIN': False,

    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,
    'AUDIENCE': None,
    'ISSUER': None,
    'JWK_URL': None,
    'LEEWAY': 0,
    'ACCESS_TOKEN_COOKIE': 'access_token',
    'AUTH_HEADER_TYPES': ('Bearer',),
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    'USER_AUTHENTICATION_RULE': 'rest_framework_simplejwt.authentication.default_user_authentication_rule',

    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',
    'TOKEN_USER_CLASS': 'rest_framework_simplejwt.models.TokenUser',

    'JTI_CLAIM': 'jti',

    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
    'SLIDING_TOKEN_LIFETIME': timedelta(minutes=5),
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=1),
    'BLACKLIST_AFTER_ROTATION': True,
}


# import django
# from django.utils.encoding import smart_str
# from django.utils.translation import gettext
#
# django.utils.translation.ugettext = gettext
# django.utils.encoding.smart_text = smart_str

# CSRF

##### CORS config start #####
CORS_ALLOW_CREDENTIALS = True

# 전부 허용 할 경우
CORS_ALLOW_ALL_ORIGINS = True

#
# CORS_ALLOW_METHODS = [  # 허용할 옵션
#     "DELETE",
#     "GET",
#     "OPTIONS",
#     "PATCH",
#     "POST",
#     "PUT",
# ]
#
# CORS_ORIGIN_ALLOW_ALL = True
#
# CORS_ALLOW_CREDENTIALS = True
# CSRF_TRUSTED_ORIGINS =  ['http://127.0.0.1:8000','http://localhost:8000', 'http://124.51.235.215:8000', 'http://localhost:3000','http://124.51.235.215:3000','http://api.univ-parking.xyz','http://univ-parking.xyz', 'http://127.0.0.1:3000']
# CORS_ORIGIN_WHITELIST = ['http://127.0.0.1:8000','http://localhost:8000', 'http://124.51.235.215:8000', 'http://localhost:3000','http://124.51.235.215:3000','http://api.univ-parking.xyz','http://univ-parking.xym', 'http://127.0.0.1:3000']
# CORS_ALLOW_ALL_ORIGINS: True
#
# CORS_ALLOW_HEADERS = (
#     'access-control-allow-credentials',
#     'access-control-allow-origin',
#     'access-control-request-method',
#     'access-control-request-headers',
#     'accept',
#     'accept-encoding',
#     'accept-language',
#     'authorization',
#     'connection',
#     'content-type',
#     'dnt',
#     'credentials',
#     'host',
#     'origin',
#     'user-agent',
#     'X-CSRFToken',
#     'csrftoken',
#     'x-requested-with',
# )
#

# cron setting

CRONJOBS = [
    # ('*/1 * * * *', 'core.cron.crontab_every_minute', '>> '+os.path.join(BASE_DIR, 'config/log/cron.log'),
    # ('*/1 * * * *', 'core.cron.crontab_every_minute', '>> '+os.path.join(BASE_DIR, 'config/log/cron.log')+' 2>&1 ')
]
